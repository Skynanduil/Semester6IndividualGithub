version: 2.1

orbs:
  maven: circleci/maven@1.3.0
  node: circleci/node@5.0.2
  docker: circleci/docker@1
  k8s: digitalocean/k8s@0.1.1
  grafana: grafana/k6@1.1.3

jobs:
  mvn-build:
    executor: maven/default
    steps:
      - checkout
      - run:
          name: maven build producer service
          command: mvn -f walking\ skeleton/services/service-producer/pom.xml clean package
      - run:
          name: generate sonar cloud report for producer
          command: mvn -f walking\ skeleton/services/service-producer/pom.xml verify sonar:sonar -Dsonar.projectKey=Skynanduil_Semester6IndividualGithub -DskipTests
      - run:
          name: maven build consumer service
          command: mvn -f walking\ skeleton/services/service-consumer/pom.xml clean package -DskipTests
      - run:
          name: maven build gateway
          command: mvn -f walking\ skeleton/services/gateway/pom.xml clean package -DskipTests

  npm-build:
    executor: node/default
    steps:
      - checkout
      - run:
          name: npm install and test
          command: npm --prefix walking\ skeleton/services/frontend/ cit
      - run: 
          name: npm build frontend
          command: npm --prefix walking\ skeleton/services/frontend/ run build

  dockerhub-deploy:
    docker:
      - image: cimg/openjdk:17.0.1
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - run:
          name: build image $DOCKER_USER/skeleton-service-producer
          command: mvn -f walking\ skeleton/services/service-producer/pom.xml compile jib:dockerBuild -Djib.to.image=$DOCKER_USER/skeleton-service-producer -Djib.to.tags=$CIRCLE_SHA1
      - run: 
          name: build image $DOCKER_USER/skeleton-service-consumer
          command: mvn -f walking\ skeleton/services/service-consumer/pom.xml compile jib:dockerBuild -Djib.to.image=$DOCKER_USER/skeleton-service-consumer -Djib.to.tags=$CIRCLE_SHA1
      - run: 
          name: build image $DOCKER_USER/skeleton-gateway
          command: mvn -f walking\ skeleton/services/gateway/pom.xml compile jib:dockerBuild -Djib.to.image=$DOCKER_USER/skeleton-gateway -Djib.to.tags=$CIRCLE_SHA1
      - docker/build:
          image: $DOCKER_USER/skeleton-frontend
          path: walking\ skeleton/services/frontend
          docker-context: walking\ skeleton/services/frontend
          tag: "latest,$CIRCLE_SHA1"
      - docker/push: 
          image: $DOCKER_USER/skeleton-service-producer
          tag: "latest,$CIRCLE_SHA1"
      - docker/push: 
          image: $DOCKER_USER/skeleton-service-consumer
          tag: "latest,$CIRCLE_SHA1"
      - docker/push: 
          image: $DOCKER_USER/skeleton-gateway
          tag: "latest,$CIRCLE_SHA1"
      - docker/push:
          image: $DOCKER_USER/skeleton-frontend
          tag: "latest,$CIRCLE_SHA1"

  kubernetes-deploy:
    executor: docker/docker
    steps:
      - checkout
      - k8s/install
      - k8s/initialize:
          cluster: k8s-1-22-8-do-1-ams3-1653407254093
      - run:
          name: kubernetes rolling update producer
          command: kubectl set image deployments/producer producer=$DOCKER_USER/skeleton-service-producer:$CIRCLE_SHA1 -n default
      - run:
          name: kubernetes rolling update consumer
          command: kubectl set image deployments/consumer consumer=$DOCKER_USER/skeleton-service-consumer:$CIRCLE_SHA1 -n default
      - run:
          name: kubernetes rolling update gateway
          command: kubectl set image deployments/gateway gateway=$DOCKER_USER/skeleton-gateway:$CIRCLE_SHA1 -n default
      - run:
          name: kubernetes rolling update frontend
          command: kubectl set image deployments/frontend frontend=$DOCKER_USER/skeleton-frontend:$CIRCLE_SHA1 -n default

  loadtest:
    script: walking\ skeleton/stress\ testing/test.js

workflows:
  build-and-publish:
    jobs:
      - mvn-build:
          context: SonarCloud
      - npm-build
      - loadtest
      - dockerhub-deploy:
          requires:
            - mvn-build
            - npm-build
            - loadtest
          filters:
            branches: 
              only:
                - main
      - kubernetes-deploy:
          requires:
            - dockerhub-deploy
          filters:
            branches:
              only:
                - main
